name: Node.js Backend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - run: npm install
      # Commenter l'étape de test si vous n'avez pas encore de tests définis
      # - run: npm test

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag pedeclercq/tp_devsecops_backend-app:latest

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push pedeclercq/tp_devsecops_backend-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Archive the repository
        run: |
          tar -czf repo.tar.gz --exclude='.git' *

      - name: Copy the archive to the server
        run: |
          scp -o StrictHostKeyChecking=no repo.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_DIR }}/repo.tar.gz

      - name: Extract the archive on the server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          cd ${{ secrets.DEPLOY_DIR }};
          tar -xzf repo.tar.gz;
          rm repo.tar.gz;
          "

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          cd ${{ secrets.DEPLOY_DIR }};
          docker-compose down;
          docker-compose pull;
          docker-compose up -d;
          "
